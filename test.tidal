d1 $ sound "909 ~ bass bass:4"
d1 $ sound "bd"
d1 $ sound "bd bd"
d1 $ sound "bd*3"
d1 $ sound "bd:1 sn:3"
d1 $ sound "bd:1 sn:3 ~ sn:3"

d1 silence
d2 silence
d1 $ sound "bd:3 [sn:1*2] ~ bd:3"
d1 $ sound "bd [[sn:1*2] bd] [sn:1 [bd*2]]"
d1 $ stack[
  sound "bd:3 [sn:1*2] ~ bd:3",
  sound "bass ~ bass:3 ~",
  sound "[~ cp]*4"
]

-- A simple sax sound
d1 $ sound "sax" # legato 1

-- This doesn't do anything different
d1 $ sound "sax" # legato 1 # squiz "0 1.5 0 1.5"

-- A workaround is to chop up the sounds into parts:
d1 $ chop 4 $ sound "sax" # legato 1 # squiz "0 1.5 0 1.5"

-- But now you can use a bus to change a single sound while it plays:
d1 $ sound "sax" # legato 1 # squizbus 1 "0 1.5 0 1.5"

-- You can add a bus to most things but have to take care to give each thing a different bus number:
d1 $ sound "sax" # legato 1 # squizbus 1 "0 1.5 0 1.5" # lpfbus 2 "400 2000 3000" # lpq 0.2

-- You can pattern things within bus patterns:
d1 $ sound "sax" # legato 1 # squizbus 1 (chunk 4 (fast 4) "0 1.5 0 1.5")

-- A big limitation is that bus patterns are monophonic. So if you do some patterning that layers them up, you'll be disappointed with the results:
d1 $ jux rev $ s "sax" # ampbus 1 ("[1 0 [1 0] 1]*6") # legato 1

-- A workaround is to add 1 to the bus number, and 0 to the value:
d1 $ jux (rev . (|+ ampbus 1 0)) $ s "sax" # ampbus 1 ("[1 0 [1 0] 1]*6") # legato 1

-- Or replace the control using a different bus number with `#`
d1 $ jux (rev . (# ampbus 2 "1 0 1 0")) $ s "sax" # ampbus 1 ("[1 0 [1 0] 1]*6") # legato 1

d1 $ stack [every 4 (fast 2) $ sound "drum*4" # squiz 1.3 # speed 2,
            every 2 press $ sound "sd:1*2 sd:4*3 sd*2 sd:2*2"
]

d1 $ jux press $ sound "sd:1*2 sd:4*3 sd*2 sd:2*2"

d1 $ jux (pressBy $ slow 2 sine) $ s "hh(5,8)"

hush
