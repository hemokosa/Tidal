
do
  -- conditionally apply effectpat to the final implied argument of this function if the value of condpat is > 0
  let capply condpat effectpat = every (fmap (\x -> if x > 0 then 1 else 0) (discretise 1 condpat)) effectpat
  -- apply the pattern sent to "notes" by SuperCollider over OSC to another pattern (using n)
  let chordify p = p + n (cP "[]" "notes")
  -- apply the first/lowest note of the pattern sent to "notes" by SuperCollider over OSC to another pattern (using up)
  let bassify p = p * up (mono $ cP "[]" "notes")
  -- drum pattern -- using fix to set the high hat gain to 0.6 and to apply a highpass filter
  let edrums = fix ((* gain 0.6).(# hcutoff 10000)) (s "sonhh:1") $ s "[bd*2, [~ jstsn:5], [~ sonhh:1]*2]"
  -- bass pattern -- running through 20 samples in varbass, all tuned to C
  let bass = bassify $ slow 5 $ n (run 20) + s "varbass" * gain 0.6 # legato 1 # orbit 1
  -- chord pattern -- uses a custom synthdef contained in default.scd
  let chords = chordify $ s "[~ plucklead]*2" # orbit 1
  -- noise build pattern -- uses custom synthdef contained in default.scd
  let build = slow 16 $ s "noisebuild" * gain 0.9 # orbit 1
  -- crash pattern -- highpassed crash symbol with echo and highpass
  let crash = stut 4 0.5 (1/4) $ slow 16 $ s "cc" # hcutoff 5000 # orbit 1
  -- play stuff -- btw orbit 1 has reverb on it and is sidechained to orbit 0
  ---- orbits are like busses and can be manipulated and defined in default.scd
  d1 $ stack [edrums * gain (cF 1 "16"),
              bass * gain (cF 1 "17"),
              chords * gain (cF 1 "18"),
              build * gain (cF 1 "19"),
              crash * gain (cF 1 "20")] # cps (132/120)

:t cF

:t discretise

:t mono

:t fix

hush

do
  -- the following is the variation I used for the end of the video
  let chord = cP "[]" "notes"
  let root = mono $ chord
  let bassSeq = foldEvery [3,5,7,9,11] (|+| 3) $ slow 2 $ run 16 + 1
  let capply cp ep = every (fmap (\x-> if x > 0 then 1 else 0) (discretise 0.25 $ cp)) ep
  d1 $ slow 2 $ stack [
    capply (cF 0 "26") (* gain 0) $ fast 2 $ inside 2 (every 8 (slow 2)) $ inside 2 (every 4 ((* speed 2).(* legato (1/4)).(stut 4 1 (1/2)))) $ n bassSeq + s "varbass" # legato 1 * up root # orbit 1 * gain 1.05,
    capply (cF 0 "25") (* gain 0) $ inside 2 (whenmod 8 7 (# hcutoff (range 100 1500 $ saw))) $ (capply (cF 0 "24") (const $ s "[~ plucklead]*8") $ foldEvery [3,4,5] ((1/4) <~) $ s "[vibsawpluck*<4 2 8> donk*<1 2 8 4> vibsawpluck donk*<1 2 6 3 4>]*2" * n "[0,24]" * legato 2 * gain 0.7) + n chord + n "[0,12]" # orbit 1,
    capply (cF 0 "27") (* gain 0) $ (capply (cF 0 "24") (const $ fast 2 $ s "jstkick:3*4" # release 1.5) $ slow (17/8) $ s "jstkick:3(<5 3 4 2>,17)" # release 1.5) * gain 0.9,
    capply (cF 0 "27") (* gain 0) $ capply (cF 0 "24") (fast 2) $ s "[~ jstsn:5]*2" # gain 0.78 # cutoff 9000 * speed 1.05 # orbit "[0,1]",
    capply (cF 0 "27") (* gain 0) $ capply (cF 0 "24") (const $ fast 2 $ s "[~ sonhh:1]*4") $ s "[sonhh:2]*16" # orbit 1 # hcutoff 10000,
    capply (cF 0 "28") (* gain 0) $slow 4 $ s "noisebuild" * gain 0.9 # orbit 1,
    capply (cF 0 "29") (* gain 0) $stut 4 0.5 (1/4) $ slow 4 $ s "cc" # orbit 1 # hcutoff 5000
    ] # cutoff (range 200 20000 $ cF 1 "16") * gain (discretise 0.25 $ range 0 1 $ (fmap (** 0.5) (cF 1 "17"))) # cps (130/240)
